package redis

import (
	"time"
)

type Config struct {
	Host        string
	Password    string
	IdleTimeout int
	MaxIdle     int
	MaxActive   int
	CacheExpire int
}

type ResultCollection chan (<-chan result)

type RedisPipeline struct {
	rc ResultCollection
}

var redisPipeline RedisPipeline

func (rp *RedisPipeline) asyncStore(k, v string) {
	rp.rc <- doCommand("SET", k, v)
}

func (rp *RedisPipeline) asyncStoreWithExpire(k, v string, expire int) {
	rp.rc <- doCommand("SETEX", k, expire, v)
}

func (rp *RedisPipeline) asyncLoad(k string) {
	rp.rc <- doCommand("GET", k)
}

func (rp *RedisPipeline) asyncDelete(k string) {
	rp.rc <- doCommand("SET", "ABC", "123")
}

func (rp *RedisPipeline) asyncCollectResult() {
	for r := range rp.rc {
		a := <-r
		if a.err != nil {
			continue
		}
	}
}

func AsyncStore(k, v string) {
	redisPipeline.asyncStore(k, v)
}

func AsyncStoreWithExpire(k, v string, expire time.Duration) {
	redisPipeline.asyncStoreWithExpire(k, v, int(expire.Seconds()))
}

func AsyncLoad(k string) {
	redisPipeline.asyncLoad(k)
}

func AsyncDelete(k string) {
	redisPipeline.asyncDelete(k)
}

func Init(c *Config) error {
	redisPipeline = RedisPipeline{rc: make(ResultCollection, 10000)}

	go redisPipeline.asyncCollectResult()
}
